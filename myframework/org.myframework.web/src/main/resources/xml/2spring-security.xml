<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd
           http://www.springframework.org/schema/context 
		   http://www.springframework.org/schema/context/spring-context-3.0.xsd ">
	<!-- 	use-expressions=”true” 需要使用表达式方式来写权限-->
	 
	<http pattern="/index.html" security="none"/>
	<http pattern="/res/**" security="none"/>
	
	<http auto-config="true"  use-expressions="false">      
	   <!--这是spring 提供的http/https信道安全的这个是重要的！你的请求信道是安全的！-->
	   <!--
		   释放用户登陆page 允许任何人访问该页面 ，IS_AUTHENTICATED_ANONYMOUSLY表示不拦截
		   另一种不拦截资源的配置：<http pattern="/login.jsp" security="none">
	   -->
	    <intercept-url pattern="/login.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
	   
	    <!-- 配置用户正常访问page-->
	    <intercept-url pattern="/**" access="ROLE_USER"/>
	    
	    <!-- 自定义用户登陆page default-target-url登陆成功跳转的page ，authentication-failure-url="/login.jsp?error=true"这里是登陆失败跳转的page-->
	    <form-login login-page="/login.jsp" login-processing-url="/login.do" username-parameter="userAccount" password-parameter="accPwd"
	     default-target-url="/main.do" authentication-failure-url="/error-noauth.jsp"/>
	    <!-- 记住密码 -->	
		<!-- <remember-me key="elim" user-service-ref="securityManager"/> -->
		
		 <logout logout-url="/logout.do" logout-success-url="/index.html" invalidate-session="true"  
                delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE"/> 
	 </http>
	 
	<authentication-manager alias="authenticationManager">
		<!-- 
			authentication-provider 引用UserDetailsService实现类时使用user-service-ref属性，引用authentication实现类时，使用ref属性
			这两个属性的区别在于  
       		ref：直接将ref依赖的bean注入到AuthenticationProvider的providers集合中  
       		user-service-ref：定义DaoAuthenticationProvider的bean注入到AuthenticationProvider的providers集合中，  
       		并且DaoAuthenticationProvider的变量userDetailsService由user-service-ref依赖的bean注入。
		-->
		<authentication-provider user-service-ref="msecurityManager">
			<!-- 密码加密 -->
			<password-encoder ref="myPasswordEncoder"/>
		</authentication-provider>
	</authentication-manager>
	
	<!-- 实现UserDetailsService -->
	<beans:bean id="msecurityManager" class="org.myframework.web.security.second.SecurityManagerSupport"></beans:bean>
	<!-- 密码加密 -->
	<beans:bean id="myPasswordEncoder" class="org.myframework.web.security.second.MyPasswordEncoder"/>
</beans:beans>